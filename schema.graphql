interface Base {
  id: ID!
  contract: String
  createdAt: DateTime!
}

type Transaction @entity {
  id: ID!
  transactionHash: String @index
  blockHash: String @index
  blockNumber: BigInt @index
  timestamp: String @index
  from: String @index
  to: String @index
  createdAt: DateTime! @index
}

type Block @entity {
  id: ID!
  blockNumber: BigInt @index
  blockHash: String @index
  processed: Boolean @index
  timestamp: String @index
  createdAt: DateTime! @index
}

# =================== HUB =================== #
type NewContract implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  newContractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ContractChanged implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  newContractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NewAssetStorage implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  newContractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type AssetStorageChanged implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  newContractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ContractRemoved implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  contractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type AssetStorageRemoved implements Base @entity {
  id: ID!
  contract: String @index
  contractName: String
  contractAddress: String
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# DEPRECATED
type OwnershipTransferred implements Base @entity {
  id: ID!
  contract: String @index

  previousOwner: String
  newOwner: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== GUARDIAN =================== #
type TokenTransferred implements Base @entity {
  id: ID!
  contract: String @index

  custodian: String @index
  amount: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type MisplacedEtherWithdrawn implements Base @entity {
  id: ID!
  contract: String @index

  custodian: String @index
  amount: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type MisplacedERC20Withdrawn implements Base @entity {
  id: ID!
  contract: String @index

  custodian: String @index
  tokenContract: String @index
  amount: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== DELEGATORS INFO =================== #
type DelegatorAdded implements Base @entity {
  id: ID!
  contract: String @index

  identityId: Int @index
  delegator: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorRemoved implements Base @entity {
  id: ID!
  contract: String @index

  identityId: Int @index
  delegator: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== EPOCH STORAGE =================== #
type EpochProducedKnowledgeValueAdded implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  epoch: BigInt @index
  knowledgeValue: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TokensAddedToEpochRange implements Base @entity {
  id: ID!
  contract: String @index

  shardId: BigInt @index
  startEpoch: BigInt
  endEpoch: BigInt
  tokenAmount: BigInt
  remainder: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type EpochTokensPaidOut implements Base @entity {
  id: ID!
  contract: String @index

  shardId: BigInt @index
  epoch: BigInt @index
  identityId: BigInt @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type EpochsFinalized implements Base @entity {
  id: ID!
  contract: String @index

  shardId: BigInt @index
  startEpoch: BigInt
  endEpoch: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== KNOWLEDGE COLLECTION STORAGE =================== #
type KnowledgeCollectionCreated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  publishOperationId: String
  merkleRoot: String
  byteSize: BigInt
  startEpoch: BigInt
  endEpoch: BigInt
  tokenAmount: BigInt
  isImmutable: Boolean

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  updateOperationId: String
  merkleRoot: String
  byteSize: BigInt
  tokenAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeAssetsMinted implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  to: String @index
  startId: BigInt
  endId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeAssetsBurned implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  from: String @index
  tokenIds: [String!]!

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionPublisherUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  publisher: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionMerkleRootsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  merkleRoots: [String!]!

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionMerkleRootAdded implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  merkleRoot: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionMerkleRootRemoved implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  merkleRoot: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionMintedUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  minted: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionBurnedUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  burned: [String!]!

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionByteSizeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  byteSize: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionChunksAmountUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  chunksAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionTokenAmountUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  tokenAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionStartEpochUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  startEpoch: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionEndEpochUpdated implements Base @entity {
  id: ID!
  contract: String @index

  knowledgeCollectionId: BigInt @index
  endEpoch: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TransferBatch implements Base @entity {
  id: ID!
  contract: String @index

  operator: String @index
  from: String @index
  to: String @index
  tokenId: [String]
  amounts: [String]

  transactionHash: String
  blockNumber: String
  createdAt: DateTime! @index
}

type TransferSingle implements Base @entity {
  id: ID!
  contract: String @index

  operator: String @index
  from: String @index
  to: String @index
  tokenIds: BigInt @index
  amount: String

  transactionHash: String
  blockNumber: String
  createdAt: DateTime! @index
}

type URIUpdate implements Base @entity {
  id: ID!
  contract: String @index

  newURI: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# NOTE: Could be deperecated, check
type URI implements Base @entity {
  id: ID!
  contract: String @index

  tokenId: String @index
  uri: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ApprovalForAll implements Base @entity {
  id: ID!
  contract: String @index

  owner: String @index
  operator: String @index
  approved: Boolean!
  transactionHash: String
  blockNumber: BigInt

  createdAt: DateTime! @index
}

# =================== PARAMETERS STORAGE =================== #
type ParameterChanged implements Base @entity {
  id: ID!
  contract: String @index

  parameterName: String
  parameterValue: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== PAYMASTER MANAGER =================== #
type PaymasterDeployed implements Base @entity {
  id: ID!
  contract: String @index
  createdAt: DateTime! @index

  deployer: String @index
  paymasterAddress: String @index
  transactionHash: String
  blockNumber: BigInt
}

# =================== PROFILE STORAGE =================== #
type ProfileCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  nodeName: String
  nodeId: String
  initialOperatorFee: Int

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ProfileDeleted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  nodeId: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeNameUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  oldName: String
  newName: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeIdUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  oldNodeId: String
  newNodeId: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeAskUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  oldAsk: BigInt
  newAsk: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeAdded implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  feePercentage: Int
  effectiveDate: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeesReplaced implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  oldFeePercentage: Int
  newFeePercentage: Int
  effectiveDate: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeesUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  operatorFees: [String!]!
  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== SHARDING TABLE STORAGE =================== #
type NodesCountIncremented implements Base @entity {
  id: ID!
  contract: String @index

  newCount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodesCountDecremented implements Base @entity {
  id: ID!
  contract: String @index

  newCount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeObjectCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  nodeId: String
  hashRingPosition: BigInt
  index: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeObjectDeleted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeIndexIncremented implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  newIndex: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeIndexDecremented implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  newIndex: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type IdentityIdIndexSet implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  index: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== STAKING STORAGE =================== #
type TotalStakeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  totalStake: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeStakeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  stake: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeRewardIndexUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  rewardIndex: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  cumulativeEarnedRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type NodeCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  cumulativePaidOutRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorCountUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorsCount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeBalanceUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  feeBalance: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  cumulativeFeeEarnedRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  cumulativeFeePaidOutRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorBaseStakeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  stakeBase: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorIndexedStakeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  stakeIndexed: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorLastRewardIndexUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  lastIndex: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  cumulativeEarnedRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  cumulativePaidOutRewards: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorWithdrawalRequestCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index
  amount: BigInt
  indexedOutAmount: BigInt
  timestamp: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type DelegatorWithdrawalRequestDeleted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  delegatorKey: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeWithdrawalRequestCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  amount: BigInt
  indexedOutAmount: BigInt
  timestamp: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorFeeWithdrawalRequestDeleted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type StakedTokensTransferred implements Base @entity {
  id: ID!
  contract: String @index

  receiver: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== WHITELIST STORAGE =================== #
type AddressWhitelisted implements Base @entity {
  id: ID!
  contract: String @index

  addr: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type AddressBlacklisted implements Base @entity {
  id: ID!
  contract: String @index

  addr: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type WhitelistEnabled implements Base @entity {
  id: ID!
  contract: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type WhitelistDisabled implements Base @entity {
  id: ID!
  contract: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== IDENTITY =================== #
type IdentityCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  operationalKey: String @index
  adminKey: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type IdentityDeleted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== RANDOM SAMPLING STORAGE =================== #
type ProofingPeriodDurationAdded implements Base @entity {
  id: ID!
  contract: String @index

  durationInBlocks: Int
  effectiveEpoch: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type PendingProofingPeriodDurationReplaced implements Base @entity {
  id: ID!
  contract: String @index

  oldDurationInBlocks: Int
  newDurationInBlocks: Int
  effectiveEpoch: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== RANDOM SAMPLING =================== #
type ChallengeCreated implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  epoch: BigInt @index
  knowledgeCollectionId: BigInt
  chunkId: BigInt
  activeProofPeriodBlock: BigInt @index
  proofingPeriodDurationInBlocks: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ValidProofSubmitted implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  epoch: BigInt @index
  score: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type AvgBlockTimeUpdated implements Base @entity {
  id: ID!
  contract: String @index

  avgBlockTimeInSeconds: Int

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ProofingPeriodDurationInBlocksUpdated implements Base @entity {
  id: ID!
  contract: String @index

  durationInBlocks: Int

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type RewardsClaimed implements Base @entity {
  id: ID!
  contract: String @index

  identityId: BigInt @index
  epoch: BigInt @index
  delegator: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type W1Updated implements Base @entity {
  id: ID!
  contract: String @index

  oldW1: BigInt @index
  newW1: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type W2Updated implements Base @entity {
  id: ID!
  contract: String @index

  oldW2: BigInt @index
  newW2: BigInt @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== PARANET =================== #
type ParanetRegistered implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  parnetKATokenId: BigInt @index
  paranetName: String
  paranetDescription: String
  nodesAccessPolicy: Int
  minersAccessPolicy: Int
  knowledgeCollectionsSubmissionPolicy: Int

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedNodeAdded implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  identityId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedNodeRemoved implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  identityId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedNodeJoinRequestCreated implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  identityId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedNodeJoinRequestAccepted implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  identityId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedNodeJoinRequestRejected implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  identityId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetIncetivesPoolDeployed implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  incentivesPool: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetMetadataUpdated implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  newParanetName: String
  newParanetDescription: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetServiceAdded implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  paranetServiceKCStorageContract: String
  paranetServiceKCTokenId: BigInt
  paranetServiceKATokenId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetServiceRegistered implements Base @entity {
  id: ID!
  contract: String @index

  paranetServiceKCStorageContract: String @index
  paranetServiceKCTokenId: BigInt @index
  paranetServiceKATokenId: BigInt @index
  paranetServiceName: String
  paranetServiceDescription: String
  paranetServiceAddresses: [String!]!

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetServiceMetadataUpdated implements Base @entity {
  id: ID!
  contract: String @index

  paranetServiceKCStorageContract: String @index
  paranetServiceKCTokenId: BigInt @index
  paranetServiceKATokenId: BigInt @index
  newParanetServiceName: String
  newParanetServiceDescription: String
  newParanetServiceAddresses: [String!]!

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type KnowledgeCollectionSubmittedToParanet implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  knowledgeCollectionStorageContract: String
  knowledgeCollectionId: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedMinerAdded implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  minerAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedMinerRemoved implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  minerAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedMinerAccessRequestCreated implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  minerAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedMinerAccessRequestAccepted implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  minerAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetPermissionedMinerAccessRequestRejected implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  minerAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== PARANET INCENTIVE POOL =================== #
type TokenEmissionMultiplierUpdateInitiated implements Base @entity {
  id: ID!
  contract: String @index

  oldMultiplier: BigInt
  newMultiplier: BigInt
  timestamp: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TokenEmissionMultiplierUpdateFinalized implements Base @entity {
  id: ID!
  contract: String @index

  oldMultiplier: BigInt
  newMultiplier: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== PARANET INCENTIVE POOL FACTORY =================== #
type ParanetIncentivesPoolDeployed implements Base @entity {
  id: ID! 
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  storageAddress: String
  poolAddress: String
  rewardTokenAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type ParanetIncentivesPoolRedeployed implements Base @entity {
  id: ID!
  contract: String @index

  paranetKCStorageContract: String @index
  paranetKCTokenId: BigInt @index
  paranetKATokenId: BigInt @index
  storageAddress: String
  newPoolAddress: String

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

# =================== PARANET INCENTIVE POOL STORAGE =================== #
type TokenRewardDeposit implements Base @entity {
  id: ID!
  contract: String @index

  sender: String
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VoterWeightUpdated implements Base @entity {
  id: ID!
  contract: String @index

  voter: String @index
  oldWeight: BigInt
  newWeight: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalMinersclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String @index

  oldAmount: BigInt
  newAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalOperatorsclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String @index

  oldAmount: BigInt
  newAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalVotersclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String @index

  oldAmount: BigInt
  newAmount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalMinersclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String @index

  amount: BigInt
  newTotal: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalOperatorsclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String @index

  amount: BigInt
  newTotal: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TotalVotersclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String @index

  amount: BigInt
  newTotal: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VotersRegistrarTransferred implements Base @entity {
  id: ID!
  contract: String @index

  previousRegistrar: String @index
  newRegistrar: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type MinerRewardProfileAdded implements Base @entity {
  id: ID!
  contract: String @index

  miner: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type MinerRewardIncreased implements Base @entity {
  id: ID!
  contract: String @index

  miner: String @index
  additionalAmount: BigInt
  newTotal: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorRewardProfileAdded implements Base @entity {
  id: ID!
  contract: String @index

  operator: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type OperatorRewardIncreased implements Base @entity {
  id: ID!
  contract: String @index

  operator: String @index
  additionalAmount: BigInt
  newTotal: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VoterAdded implements Base @entity {
  id: ID!
  contract: String @index

  voter: String @index
  weight: Int

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VoterRemoved implements Base @entity {
  id: ID!
  contract: String @index

  voter: String @index
  weight: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VotersRemoved implements Base @entity {
  id: ID!
  contract: String @index

  count: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type VoterRewardClaimed implements Base @entity {
  id: ID!
  contract: String @index

  voter: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type IncentivesPoolAddressSet implements Base @entity {
  id: ID!
  contract: String @index

  oldAddress: String @index
  newAddress: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type RewardTransferred implements Base @entity {
  id: ID!
  contract: String @index

  recipient: String @index
  amount: BigInt

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}

type TokenOriginSet implements Base @entity {
  id: ID!
  contract: String @index

  oldOrigin: String @index
  newOrigin: String @index

  transactionHash: String
  blockNumber: BigInt
  createdAt: DateTime! @index
}
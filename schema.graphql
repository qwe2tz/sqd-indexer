interface Base {
  id: ID!
  contract: String!
  name: String!
  createdAt: DateTime!
}

type Transaction @entity {
  id: ID!
  blockHash: String! @index
  blockNumber: BigInt! @index
  transactionHash: String! @index
  timestamp: BigInt! @index
  from: String! @index
  to: String @index
  createdAt: DateTime! @index
}

# =================== HUB =================== #
type NewContract implements Base @entity {
  contractName: String
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  newContractAddress: String!
}

type ContractChanged implements Base @entity {
  contractName: String
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  newContractAddress: String!
}

type NewAssetStorage implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  contractName: String!
  newContractAddress: String!
}

type AssetStorageChanged implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  contractName: String!
  newContractAddress: String!
}

type ContractRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  contractName: String!
  contractAddress: String!
}

type AssetStorageRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  contractName: String!
  contractAddress: String!
}

# DEPRECATED
type OwnershipTransferred implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  previousOwner: String!
  newOwner: String!
}


# =================== GUARDIAN =================== #
type TokenTransferred implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  custodian: String! @index
  amount: BigInt! @index
}

type MisplacedEtherWithdrawn implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  custodian: String! @index
  amount: BigInt! @index
}

type MisplacedERC20Withdrawn implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  custodian: String! @index
  tokenContract: String! @index
  amount: BigInt! @index
}

# =================== DELEGATORS INFO =================== #
type DelegatorAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegator: String! @index
}

type DelegatorRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegator: String! @index
}

# =================== EPOCH STORAGE =================== #
type EpochProducedKnowledgeValueAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  epoch: BigInt! @index
  knowledgeValue: BigInt!
}

type TokensAddedToEpochRange implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  shardId: BigInt! @index
  startEpoch: BigInt!
  endEpoch: BigInt!
  tokenAmount: BigInt!
  remainder: BigInt!
}

type EpochTokensPaidOut implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  shardId: BigInt! @index
  epoch: BigInt! @index
  identityId: BigInt! @index
  amount: BigInt!
}

type EpochsFinalized implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  shardId: BigInt! @index
  startEpoch: BigInt!
  endEpoch: BigInt!
}

# =================== KNOWLEDGE COLLECTION =================== #
type KnowledgeCollectionCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  publishOperationId: String
  merkleRoot: String!
  byteSize: BigInt!
  startEpoch: BigInt!
  endEpoch: BigInt!
  tokenAmount: BigInt!
  isImmutable: Boolean!
}

type KnowledgeCollectionUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  merkleRoot: String!
  byteSize: BigInt!
  tokenAmount: BigInt!
  updateOperationId: String
}

type KnowledgeAssetsMinted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  startId: BigInt!
  endId: BigInt!
  to: String! @index
}

type KnowledgeAssetsBurned implements Base @entity {
  from: String! @index
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  tokenIds: [String!]!
}

type KnowledgeCollectionPublisherUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  publisher: String
  eventId: BigInt! @index
}

type KnowledgeCollectionMerkleRootsUpdated implements Base @entity {
  merkleRoots: [String!]
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
}

type KnowledgeCollectionMerkleRootAdded implements Base @entity {
  merkleRoot: String
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
}

type KnowledgeCollectionMerkleRootRemoved implements Base @entity {
  merkleRoot: String
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
}

type KnowledgeCollectionMintedUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  minted: BigInt
}

type KnowledgeCollectionBurnedUpdated implements Base @entity {
  burned: [String!]
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
}

type KnowledgeCollectionByteSizeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  byteSize: BigInt
}

type KnowledgeCollectionChunksAmountUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  chunksAmount: BigInt
}

type KnowledgeCollectionTokenAmountUpdated implements Base @entity {
  id: ID!
  name: String! @index
  contract: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  tokenAmount: BigInt
}

type KnowledgeCollectionStartEpochUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  startEpoch: BigInt
}

type KnowledgeCollectionEndEpochUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  eventId: BigInt! @index
  endEpoch: BigInt
}

type TransferSingle implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  operator: String! @index
  from: String! @index
  to: String! @index
  amount: BigInt!
}

type TransferBatch implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  operator: String! @index
  from: String! @index
  tokenIds: [String!]!
  amounts: [String!]!
}

type URIUpdate implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  newURI: String!
}

# NOTE: Could be deperecated, check
type URI implements Base @entity {
  id: ID!
  name: String! @index
  contract: String! @index
  createdAt: DateTime! @index

  tokenId: BigInt! @index
  uri: String!
}

type ApprovalForAll implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  owner: String! @index
  operator: String! @index
  approved: Boolean!
}

# =================== PARAMETERS STORAGE =================== #
type ParameterChanged implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  parameterName: String!
  parameterValue: BigInt!
}

# =================== PAYMASTER MANAGER =================== #
type PaymasterDeployed implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  deployer: String! @index
  paymasterAddress: String! @index
}

# =================== PROFILE STORAGE =================== #
type ProfileCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  nodeName: String!
  nodeId: String!
  initialOperatorFee: BigInt!
}

type ProfileDeleted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  nodeId: String!
}

type NodeNameUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  oldName: String!
  newName: String!
}

type NodeIdUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  oldNodeId: String!
  newNodeId: String!
}

type NodeAskUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  oldAsk: BigInt!
  newAsk: BigInt!
}

type OperatorFeeAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  feePercentage: BigInt!
  effectiveDate: BigInt!
}

type OperatorFeesReplaced implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  oldFeePercentage: BigInt!
  newFeePercentage: BigInt!
  effectiveDate: BigInt!
}

type OperatorFeesUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  # TODO: Doublecheck mapping
  operatorFees: [String!]!
}

# =================== RANDOM SAMPLING STORAGE =================== #
type ProofingPeriodDurationAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  durationInBlocks: BigInt!
  effectiveEpoch: BigInt! @index
}

type PendingProofingPeriodDurationReplaced implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldDurationInBlocks: BigInt!
  newDurationInBlocks: BigInt!
  effectiveEpoch: BigInt! @index
}

# =================== SHARDING TABLE STORAGE =================== #
type NodesCountIncremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  newCount: BigInt!
}

type NodesCountDecremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  newCount: BigInt!
}

type NodeObjectCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  nodeId: String!
  hashRingPosition: BigInt!
  index: BigInt!
}

type NodeObjectDeleted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
}

type NodeIndexIncremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  newIndex: BigInt!
}

type NodeIndexDecremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  newIndex: BigInt!
}

type IdentityIdIndexSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  index: BigInt!
}

# =================== STAKING STORAGE =================== #
type TotalStakeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  totalStake: BigInt!
}

type NodeStakeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  stake: BigInt!
}

type NodeRewardIndexUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  rewardIndex: BigInt!
}

type NodeCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  cumulativeEarnedRewards: BigInt!
}

type NodeCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  cumulativePaidOutRewards: BigInt!
}

type DelegatorCountUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorsCount: BigInt!
}

type OperatorFeeBalanceUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  feeBalance: BigInt!
}

type OperatorFeeCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  cumulativeFeeEarnedRewards: BigInt!
}

type OperatorFeeCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  cumulativeFeePaidOutRewards: BigInt!
}

type DelegatorBaseStakeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  stakeBase: BigInt!
}

type DelegatorIndexedStakeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  stakeIndexed: BigInt!
}

type DelegatorLastRewardIndexUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  lastIndex: BigInt!
}

type DelegatorCumulativeEarnedRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  cumulativeEarnedRewards: BigInt!
}

type DelegatorCumulativePaidOutRewardsUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  cumulativePaidOutRewards: BigInt!
}

type DelegatorWithdrawalRequestCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
  amount: BigInt!
  indexedOutAmount: BigInt!
  timestamp: BigInt!
}

type DelegatorWithdrawalRequestDeleted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  delegatorKey: String! @index
}

type OperatorFeeWithdrawalRequestCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  amount: BigInt!
  indexedOutAmount: BigInt!
  timestamp: BigInt!
}

type OperatorFeeWithdrawalRequestDeleted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
}

type StakedTokensTransferred implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  receiver: String! @index
  amount: BigInt!
}

# =================== WHITELIST STORAGE =================== #
type AddressWhitelisted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  addr: String! @index
}

type AddressBlacklisted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  addr: String! @index
}

type WhitelistEnabled implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index
}

type WhitelistDisabled implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index
}

# =================== IDENTITY =================== #
type IdentityCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  operationalKey: String! @index
  adminKey: String! @index
}

type IdentityDeleted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
}

# =================== RANDOM SAMPLING =================== #
type ChallengeCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  epoch: BigInt! @index
  knowledgeCollectionId: BigInt!
  chunkId: BigInt!
  activeProofPeriodBlock: BigInt! @index
  proofingPeriodDurationInBlocks: BigInt!
}

type ValidProofSubmitted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  identityId: BigInt! @index
  epoch: BigInt! @index
  score: BigInt!
}

type AvgBlockTimeUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  avgBlockTimeInSeconds: BigInt!
}

type ProofingPeriodDurationInBlocksUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  durationInBlocks: BigInt!
}

# =================== PARANET =================== #
type ParanetRegistered implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  paranetName: String!
  paranetDescription: String!
  nodesAccessPolicy: BigInt!
  minersAccessPolicy: BigInt!
  knowledgeCollectionsSubmissionPolicy: BigInt!
}

type ParanetPermissionedNodeAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  identityId: BigInt! @index
}

type ParanetPermissionedNodeRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  identityId: BigInt! @index
}

type ParanetPermissionedNodeJoinRequestCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  identityId: BigInt! @index
}

type ParanetPermissionedNodeJoinRequestAccepted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  identityId: BigInt! @index
}

type ParanetPermissionedNodeJoinRequestRejected implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  identityId: BigInt! @index
}

type ParanetIncetivesPoolDeployed implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  incentivesPool: String! # Adjust type based on the structure of ParanetLib.IncentivesPool
}

type ParanetMetadataUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  newParanetName: String!
  newParanetDescription: String!
}

type ParanetServiceAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  paranetServiceKCStorageContract: String!
  paranetServiceKCTokenId: BigInt!
  paranetServiceKATokenId: BigInt!
}

type ParanetServiceRegistered implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetServiceKCStorageContract: String! @index
  paranetServiceKCTokenId: BigInt! @index
  paranetServiceKATokenId: BigInt! @index
  paranetServiceName: String!
  paranetServiceDescription: String!
  paranetServiceAddresses: [String!]!
}

type ParanetServiceMetadataUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetServiceKCStorageContract: String! @index
  paranetServiceKCTokenId: BigInt! @index
  paranetServiceKATokenId: BigInt! @index
  newParanetServiceName: String!
  newParanetServiceDescription: String!
  newParanetServiceAddresses: [String!]!
}

type KnowledgeCollectionSubmittedToParanet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  knowledgeCollectionStorageContract: String!
  knowledgeCollectionId: BigInt!
}

type ParanetPermissionedMinerAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  minerAddress: String!
}

type ParanetPermissionedMinerRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  minerAddress: String!
}

type ParanetPermissionedMinerAccessRequestCreated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  minerAddress: String!
}

type ParanetPermissionedMinerAccessRequestAccepted implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  minerAddress: String!
}

type ParanetPermissionedMinerAccessRequestRejected implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  minerAddress: String!
}

# =================== PARANET INCENTIVE POOL =================== #
type TokenEmissionMultiplierUpdateInitiated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldMultiplier: BigInt!
  newMultiplier: BigInt!
  timestamp: BigInt!
}

type TokenEmissionMultiplierUpdateFinalized implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldMultiplier: BigInt!
  newMultiplier: BigInt!
}

# =================== PARANET INCENTIVE POOL FACTORY =================== #
type ParanetIncentivesPoolDeployed implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  storageAddress: String!
  poolAddress: String!
  rewardTokenAddress: String!
}

type ParanetIncentivesPoolRedeployed implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  paranetKCStorageContract: String! @index
  paranetKCTokenId: BigInt! @index
  paranetKATokenId: BigInt @index
  storageAddress: String!
  newPoolAddress: String!
}

# =================== PARANET INCENTIVE POOL STORAGE =================== #
type TokenRewardDeposit implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  sender: String!
  amount: BigInt!
}

type VoterWeightUpdated implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  voter: String! @index
  oldWeight: BigInt!
  newWeight: BigInt!
}

type TotalMinersclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldAmount: BigInt!
  newAmount: BigInt!
}

type TotalOperatorsclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldAmount: BigInt!
  newAmount: BigInt!
}

type TotalVotersclaimedTokenSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldAmount: BigInt!
  newAmount: BigInt!
}

type TotalMinersclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  amount: BigInt!
  newTotal: BigInt!
}

type TotalOperatorsclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  amount: BigInt!
  newTotal: BigInt!
}

type TotalVotersclaimedTokenDecremented implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  amount: BigInt!
  newTotal: BigInt!
}

type VotersRegistrarTransferred implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  previousRegistrar: String! @index
  newRegistrar: String! @index
}

type MinerRewardProfileAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  miner: String! @index
  amount: BigInt!
}

type MinerRewardIncreased implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  miner: String! @index
  additionalAmount: BigInt!
  newTotal: BigInt!
}

type OperatorRewardProfileAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  operator: String! @index
  amount: BigInt!
}

type OperatorRewardIncreased implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  operator: String! @index
  additionalAmount: BigInt!
  newTotal: BigInt!
}

type VoterAdded implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  voter: String! @index
  weight: BigInt!
}

type VoterRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  voter: String! @index
  weight: BigInt!
}

type VotersRemoved implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  count: BigInt!
}

type VoterRewardClaimed implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  voter: String! @index
  amount: BigInt!
}

type IncentivesPoolAddressSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldAddress: String! @index
  newAddress: String! @index
}

type RewardTransferred implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  recipient: String! @index
  amount: BigInt!
}

type TokenOriginSet implements Base @entity {
  id: ID!
  contract: String! @index
  name: String! @index
  createdAt: DateTime! @index

  oldOrigin: String! @index
  newOrigin: String! @index
}
